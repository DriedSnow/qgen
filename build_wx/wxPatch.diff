diff --git a/build/cmake/lib/stc/CMakeLists.txt b/build/cmake/lib/stc/CMakeLists.txt
index bd6acd858c..88c1c8bfb4 100644
--- a/build/cmake/lib/stc/CMakeLists.txt
+++ b/build/cmake/lib/stc/CMakeLists.txt
@@ -95,6 +95,7 @@ wx_add_builtin_library(wxscintilla
     src/stc/scintilla/lexers/LexProps.cxx
     src/stc/scintilla/lexers/LexPS.cxx
     src/stc/scintilla/lexers/LexPython.cxx
+    src/stc/scintilla/lexers/LexQSP.cxx
     src/stc/scintilla/lexers/LexR.cxx
     src/stc/scintilla/lexers/LexRebol.cxx
     src/stc/scintilla/lexers/LexRegistry.cxx
diff --git a/include/wx/generic/animate.h b/include/wx/generic/animate.h
index 46413e01dd..cc607a1bc0 100644
--- a/include/wx/generic/animate.h
+++ b/include/wx/generic/animate.h
@@ -130,6 +130,10 @@ protected:
     wxBitmap      m_backingStore;     // The frames are drawn here and then blitted
                                       // on the screen
 
+    int m_scalePosX;
+    int m_scalePosY;
+    int m_scaleWidth;
+    int m_scaleHeight;
 private:
     typedef wxAnimationCtrlBase base_type;
     wxDECLARE_DYNAMIC_CLASS(wxGenericAnimationCtrl);
diff --git a/include/wx/htmllbox.h b/include/wx/htmllbox.h
index a65fa566e5..06f827c899 100644
--- a/include/wx/htmllbox.h
+++ b/include/wx/htmllbox.h
@@ -133,6 +133,15 @@ protected:
     // ensure that the given item is cached
     void CacheItem(size_t n) const;
 
+protected:
+    // HTML parser we use
+    wxHtmlWinParser *m_htmlParser;
+
+#if wxUSE_FILESYSTEM
+    // file system used by m_htmlParser
+    wxFileSystem m_filesystem;
+#endif // wxUSE_FILESYSTEM
+
 private:
     // wxHtmlWindowInterface methods:
     virtual void SetHTMLWindowTitle(const wxString& title) wxOVERRIDE;
@@ -173,14 +182,6 @@ private:
     // this class caches the pre-parsed HTML to speed up display
     wxHtmlListBoxCache *m_cache;
 
-    // HTML parser we use
-    wxHtmlWinParser *m_htmlParser;
-
-#if wxUSE_FILESYSTEM
-    // file system used by m_htmlParser
-    wxFileSystem m_filesystem;
-#endif // wxUSE_FILESYSTEM
-
     // rendering style for the parser which allows us to customize our colours
     wxHtmlListBoxStyle *m_htmlRendStyle;
 
diff --git a/include/wx/stc/stc.h b/include/wx/stc/stc.h
index 4887511ead..d838433446 100644
--- a/include/wx/stc/stc.h
+++ b/include/wx/stc/stc.h
@@ -569,6 +569,7 @@ class WXDLLIMPEXP_FWD_CORE wxScrollBar;
 #define wxSTC_LEX_TEHEX 119
 #define wxSTC_LEX_JSON 120
 #define wxSTC_LEX_EDIFACT 121
+#define wxSTC_LEX_QSP 200
 
 /// When a lexer specifies its language as SCLEX_AUTOMATIC it receives a
 /// value assigned in sequence from SCLEX_AUTOMATIC+1.
diff --git a/src/aui/floatpane.cpp b/src/aui/floatpane.cpp
index 4953c1e238..80ecd45978 100644
--- a/src/aui/floatpane.cpp
+++ b/src/aui/floatpane.cpp
@@ -133,10 +133,6 @@ void wxAuiFloatingFrame::SetPaneWindow(const wxAuiPaneInfo& pane)
     // pane.floating_size from inside it so we must also record its original
     // value before doing it.
     const bool hasFloatingSize = pane.floating_size != wxDefaultSize;
-    if (pane.IsFixed())
-    {
-        SetWindowStyleFlag(GetWindowStyleFlag() & ~wxRESIZE_BORDER);
-    }
 
     if ( hasFloatingSize )
     {
diff --git a/src/aui/framemanager.cpp b/src/aui/framemanager.cpp
index e9aed4e5f0..b4a8421e4c 100644
--- a/src/aui/framemanager.cpp
+++ b/src/aui/framemanager.cpp
@@ -2685,6 +2685,7 @@ void wxAuiManager::Update()
                 p.window->Refresh();
                 p.window->Update();
             }
+            p.BestSize(p.rect.GetSize());
         }
     }
 
diff --git a/src/generic/animateg.cpp b/src/generic/animateg.cpp
index 578827b52b..82712ac939 100644
--- a/src/generic/animateg.cpp
+++ b/src/generic/animateg.cpp
@@ -178,6 +178,7 @@ void wxGenericAnimationCtrl::Init()
     m_currentFrame = 0;
     m_looped = false;
     m_isPlaying = false;
+    m_scalePosX = m_scalePosY = m_scaleWidth = m_scaleHeight = 0;
 
     // use the window background colour by default to be consistent
     // with the GTK+ native version
@@ -250,6 +251,9 @@ void wxGenericAnimationCtrl::SetAnimation(const wxAnimation& animation)
 
     // set new animation even if it's wxNullAnimation
     m_animation = animation;
+    wxSizeEvent e;
+    OnSize(e);
+
     if (!m_animation.IsOk())
     {
         DisplayStaticImage();
@@ -354,18 +358,14 @@ bool wxGenericAnimationCtrl::RebuildBackingStoreUpToFrame(unsigned int frame)
 {
     // if we've not created the backing store yet or it's too
     // small, then recreate it
-    wxSize sz = m_animation.GetSize(),
-           winsz = GetClientSize();
-    int w = wxMin(sz.GetWidth(), winsz.GetWidth());
-    int h = wxMin(sz.GetHeight(), winsz.GetHeight());
-
-    if ( !m_backingStore.IsOk() ||
-            m_backingStore.GetWidth() < w || m_backingStore.GetHeight() < h )
+    wxSize sz = m_animation.GetSize();
+    int w = sz.GetWidth(), h = sz.GetHeight();
+    if (!m_backingStore.IsOk() ||
+        m_backingStore.GetWidth() != w || m_backingStore.GetHeight() != h)
     {
         if (!m_backingStore.Create(w, h))
             return false;
     }
-
     wxMemoryDC dc;
     dc.SelectObject(m_backingStore);
 
@@ -498,7 +498,11 @@ void wxGenericAnimationCtrl::DrawCurrentFrame(wxDC& dc)
     wxASSERT( m_backingStore.IsOk() );
 
     // m_backingStore always contains the current frame
-    dc.DrawBitmap(m_backingStore, 0, 0, true /* use mask in case it's present */);
+    if (m_scaleWidth > 0 && m_scaleHeight > 0)
+    {
+        wxBitmap bitmap(m_backingStore.ConvertToImage().Scale(m_scaleWidth, m_scaleHeight));
+        dc.DrawBitmap(bitmap, m_scalePosX, m_scalePosY, true);
+    }
 }
 
 void wxGenericAnimationCtrl::DisposeToBackground()
@@ -546,7 +550,11 @@ void wxGenericAnimationCtrl::OnPaint(wxPaintEvent& WXUNUSED(event))
         // NOTE: we draw the bitmap explicitly ignoring the mask (if any);
         //       i.e. we don't want to combine the backing store with the
         //       possibly wrong preexisting contents of the window!
-        dc.DrawBitmap(m_backingStore, 0, 0, false /* no mask */);
+        if (m_scaleWidth > 0 && m_scaleHeight > 0)
+        {
+            wxBitmap bitmap(m_backingStore.ConvertToImage().Scale(m_scaleWidth, m_scaleHeight));
+            dc.DrawBitmap(bitmap, m_scalePosX, m_scalePosY, false);
+        }
     }
     else
     {
@@ -606,6 +614,19 @@ void wxGenericAnimationCtrl::OnSize(wxSizeEvent &WXUNUSED(event))
             if (!RebuildBackingStoreUpToFrame(m_currentFrame))
                 Stop();     // in case we are playing
         }
+        int w, h, srcW, srcH;
+        wxSize srcSize = m_animation.GetSize();
+        GetClientSize(&w, &h);
+        srcW = srcSize.GetWidth();
+        srcH = srcSize.GetHeight();
+        m_scaleWidth = srcW * h / srcH;
+        m_scaleHeight = srcH * w / srcW;
+        if (m_scaleWidth > w)
+            m_scaleWidth = w;
+        else
+            m_scaleHeight = h;
+        m_scalePosX = (w - m_scaleWidth) / 2;
+        m_scalePosY = (h - m_scaleHeight) / 2;
     }
 }
 
diff --git a/src/generic/scrlwing.cpp b/src/generic/scrlwing.cpp
index 53a556af22..35e69d346a 100644
--- a/src/generic/scrlwing.cpp
+++ b/src/generic/scrlwing.cpp
@@ -556,14 +556,9 @@ void wxScrollHelperBase::HandleOnScroll(wxScrollWinEvent& event)
         m_win->SetScrollPos(wxVERTICAL, m_yScrollPosition);
     }
 
-    if ( needsRefresh )
-    {
-        m_targetWindow->Refresh(true, GetScrollRect());
-    }
-    else
-    {
+    m_targetWindow->Refresh(true, GetScrollRect());
+    if (!needsRefresh)
         m_targetWindow->ScrollWindow(dx, dy, GetScrollRect());
-    }
 }
 
 int wxScrollHelperBase::CalcScrollInc(wxScrollWinEvent& event)
diff --git a/src/html/htmlwin.cpp b/src/html/htmlwin.cpp
index 6662d1cd77..8ba82eee39 100644
--- a/src/html/htmlwin.cpp
+++ b/src/html/htmlwin.cpp
@@ -488,7 +488,6 @@ bool wxHtmlWindow::DoSetPage(const wxString& source)
     // ...and run the parser on it:
     wxClientDC dc(this);
     dc.SetMapMode(wxMM_TEXT);
-    SetBackgroundColour(wxColour(0xFF, 0xFF, 0xFF));
     SetBackgroundImage(wxNullBitmap);
 
     double pixelScale = 1.0;
diff --git a/src/html/m_image.cpp b/src/html/m_image.cpp
index edef506fd1..1d557d8383 100644
--- a/src/html/m_image.cpp
+++ b/src/html/m_image.cpp
@@ -320,6 +320,8 @@ private:
     wxBitmap           *m_bitmap;
     int                 m_align;
     int                 m_bmpW, m_bmpH;
+    wxBitmap            m_cachedBmp;
+    int                 m_bmpMaxW, m_bmpMaxH;
     bool                m_bmpWpercent:1;
     bool                m_bmpHpresent:1;
     bool                m_showFrame:1;
@@ -373,6 +375,7 @@ wxHtmlImageCell::wxHtmlImageCell(wxHtmlWindowInterface *windowIface,
     m_bitmap = NULL;
     m_bmpW   = w;
     m_bmpH   = h;
+    m_bmpMaxW = m_bmpMaxH = wxDefaultCoord;
     m_align  = align;
     m_bmpWpercent = wpercent;
     m_bmpHpresent = hpresent;
@@ -403,20 +406,21 @@ wxHtmlImageCell::wxHtmlImageCell(wxHtmlWindowInterface *windowIface,
                     if ( m_gifDecoder->LoadGIF(*s) == wxGIF_OK )
                     {
                         wxImage img;
-                        if ( m_gifDecoder->ConvertToImage(0, &img) )
-                            SetImage(img);
-
                         readImg = false;
 
                         if ( m_gifDecoder->IsAnimation() )
                         {
                             m_gifTimer = new wxGIFTimer(this);
+                            wxSize sz(m_gifDecoder->GetAnimationSize());
+                            m_bmpMaxW = sz.GetWidth() / scaleHDPI;
+                            m_bmpMaxH = sz.GetHeight() / scaleHDPI;
                             long delay = m_gifDecoder->GetDelay(0);
                             if ( delay == 0 )
                                 delay = 1;
                             m_gifTimer->Start(delay, true);
                         }
-                        else
+                        if (m_gifDecoder->ConvertToImage(0, &img)) SetImage(img, scaleHDPI);
+                        if (!m_gifDecoder->IsAnimation())
                         {
                             wxDELETE(m_gifDecoder);
                         }
@@ -438,19 +442,8 @@ wxHtmlImageCell::wxHtmlImageCell(wxHtmlWindowInterface *windowIface,
         }
         else // input==NULL, use "broken image" bitmap
         {
-            if ( m_bmpW == wxDefaultCoord && m_bmpH == wxDefaultCoord )
-            {
-                m_bmpW = 29;
-                m_bmpH = 31;
-            }
-            else
-            {
-                m_showFrame = true;
-                if ( m_bmpW == wxDefaultCoord ) m_bmpW = 31;
-                if ( m_bmpH == wxDefaultCoord ) m_bmpH = 33;
-            }
-            m_bitmap =
-                new wxBitmap(wxArtProvider::GetBitmap(wxART_MISSING_IMAGE));
+            wxBitmap missBmp(wxArtProvider::GetBitmap(wxART_MISSING_IMAGE));
+            SetImage(missBmp.ConvertToImage());
         }
     }
     //else: ignore the 0-sized images used sometimes on the Web pages
@@ -468,14 +461,26 @@ void wxHtmlImageCell::SetImage(const wxImage& img, double scaleHDPI)
         ww = img.GetWidth();
         hh = img.GetHeight();
 
-        if ( m_bmpW == wxDefaultCoord)
-            m_bmpW = ww / scaleHDPI;
-        if ( m_bmpH == wxDefaultCoord)
-            m_bmpH = hh / scaleHDPI;
+        if (m_bmpMaxW == wxDefaultCoord)
+            m_bmpMaxW = ww / scaleHDPI;
+        if (m_bmpMaxH == wxDefaultCoord)
+            m_bmpMaxH = hh / scaleHDPI;
+        if (m_bmpW == wxDefaultCoord && m_bmpH == wxDefaultCoord)
+        {
+            m_bmpW = m_bmpMaxW;
+            m_bmpH = m_bmpMaxH;
+        }
+        else if (m_bmpW == wxDefaultCoord)
+            m_bmpW = m_bmpMaxW * m_bmpH / m_bmpMaxH;
+        else if (m_bmpH == wxDefaultCoord)
+            m_bmpH = m_bmpMaxH * m_bmpW / m_bmpMaxW;
 
         // On a Mac retina screen, we might have found a @2x version of the image,
         // so specify this scale factor.
-        m_bitmap = new wxBitmap(img, -1, scaleHDPI);
+        if (ww == m_bmpMaxW && hh == m_bmpMaxH)
+            m_bitmap = new wxBitmap(img, -1, scaleHDPI);
+        else
+            m_bitmap = new wxBitmap(img.Size(wxSize(m_bmpMaxW, m_bmpMaxH), wxPoint(0, 0)), -1, scaleHDPI);
     }
 #endif
 }
@@ -500,7 +505,6 @@ void wxHtmlImageCell::AdvanceAnimation(wxTimer *timer)
     if (m_nCurrFrame == m_gifDecoder->GetFrameCount())
         m_nCurrFrame = 0;
 
-    if ( m_physX == wxDefaultCoord )
     {
         m_physX = m_physY = 0;
         for (wxHtmlCell *cell = this; cell; cell = cell->GetParent())
@@ -519,18 +523,24 @@ void wxHtmlImageCell::AdvanceAnimation(wxTimer *timer)
          m_gifDecoder->ConvertToImage(m_nCurrFrame, &img) )
     {
 #if !defined(__WXMSW__) || wxUSE_WXDIB
-        if ( m_gifDecoder->GetFrameSize(m_nCurrFrame) != wxSize(m_Width, m_Height) ||
-             m_gifDecoder->GetFramePosition(m_nCurrFrame) != wxPoint(0, 0) )
+        if (m_gifDecoder->GetFramePosition(m_nCurrFrame) != wxPoint(0, 0))
         {
-            wxBitmap bmp(img);
+            wxBitmap bmp(img.Size(wxSize(m_bmpMaxW, m_bmpMaxH), m_gifDecoder->GetFramePosition(m_nCurrFrame)));
             wxMemoryDC dc;
             dc.SelectObject(*m_bitmap);
-            dc.DrawBitmap(bmp, m_gifDecoder->GetFramePosition(m_nCurrFrame),
-                          true /* use mask */);
+            dc.DrawBitmap(bmp, 0, 0, true);
         }
         else
 #endif
             SetImage(img);
+
+        if (m_Width > 0 && m_Height > 0)
+        {
+            if (m_bitmap->GetWidth() == m_Width && m_bitmap->GetHeight() == m_Height)
+                m_cachedBmp = *m_bitmap;
+            else
+                m_cachedBmp = wxBitmap(m_bitmap->ConvertToImage().Scale(m_Width, m_Height));
+        }
         win->Refresh(img.HasMask(), &rect);
     }
 
@@ -557,6 +567,15 @@ void wxHtmlImageCell::Layout(int w)
         m_Width  = static_cast<int>(m_scale*m_bmpW);
         m_Height = static_cast<int>(m_scale*m_bmpH);
     }
+    if (m_Width < 0) m_Width = 0;
+    if (m_Height < 0) m_Height = 0;
+    if (m_bitmap && m_Width > 0 && m_Height > 0)
+    {
+        if (m_bitmap->GetWidth() == m_Width && m_bitmap->GetHeight() == m_Height)
+            m_cachedBmp = *m_bitmap;
+        else
+            m_cachedBmp = wxBitmap(m_bitmap->ConvertToImage().Scale(m_Width, m_Height));
+    }
 
     switch (m_align)
     {
@@ -597,48 +616,9 @@ void wxHtmlImageCell::Draw(wxDC& dc, int x, int y,
         dc.SetBrush(*wxTRANSPARENT_BRUSH);
         dc.SetPen(*wxBLACK_PEN);
         dc.DrawRectangle(x + m_PosX, y + m_PosY, m_Width, m_Height);
-        x++, y++;
-    }
-    if ( m_bitmap )
-    {
-        // We add in the scaling from the desired bitmap width
-        // and height, so we only do the scaling once.
-        double imageScaleX = 1.0;
-        double imageScaleY = 1.0;
-
-        // Optimisation for Windows: WIN32 scaling for window DCs is very poor,
-        // so unless we're using a printer DC, do the scaling ourselves.
-#if defined(__WXMSW__) && wxUSE_IMAGE
-        if (m_Width >= 0 && m_Width != m_bitmap->GetWidth()
-    #if wxUSE_PRINTING_ARCHITECTURE
-            && !dc.IsKindOf(CLASSINFO(wxPrinterDC))
-    #endif
-           )
-        {
-            wxImage image(m_bitmap->ConvertToImage());
-            if (image.HasMask())
-            {
-                // Convert the mask to an alpha channel or scaling won't work correctly
-                image.InitAlpha();
-            }
-            image.Rescale(m_Width, m_Height, wxIMAGE_QUALITY_HIGH);
-            (*m_bitmap) = wxBitmap(image);
-        }
-#endif 
-
-        if (m_Width != m_bitmap->GetScaledWidth())
-            imageScaleX = (double) m_Width / (double) m_bitmap->GetScaledWidth();
-        if (m_Height != m_bitmap->GetScaledHeight())
-            imageScaleY = (double) m_Height / (double) m_bitmap->GetScaledHeight();
-
-        double us_x, us_y;
-        dc.GetUserScale(&us_x, &us_y);
-        dc.SetUserScale(us_x * imageScaleX, us_y * imageScaleY);
-
-        dc.DrawBitmap(*m_bitmap, (int) ((x + m_PosX) / (imageScaleX)),
-                                 (int) ((y + m_PosY) / (imageScaleY)), true);
-        dc.SetUserScale(us_x, us_y);
     }
+    if (m_cachedBmp.IsOk())
+        dc.DrawBitmap(m_cachedBmp, x + m_PosX, y + m_PosY, true);
 }
 
 wxHtmlLinkInfo *wxHtmlImageCell::GetLink( int x, int y ) const
diff --git a/src/html/m_links.cpp b/src/html/m_links.cpp
index 5acfea0973..fc1a07363d 100644
--- a/src/html/m_links.cpp
+++ b/src/html/m_links.cpp
@@ -84,7 +84,8 @@ TAG_HANDLER_BEGIN(A, "A")
             // set default styles, might get overridden by ApplyStyle
             m_WParser->SetActualColor(m_WParser->GetLinkColor());
             m_WParser->GetContainer()->InsertCell(new wxHtmlColourCell(m_WParser->GetLinkColor()));
-            m_WParser->SetFontUnderlined(true);
+            if (!(tag.HasParam(wxT("CLASS")) && tag.GetParam(wxT("CLASS")).IsSameAs(wxT("PLAIN"), false)))
+                m_WParser->SetFontUnderlined(true);
             m_WParser->GetContainer()->InsertCell(new wxHtmlFontCell(m_WParser->CreateCurrentFont()));
             m_WParser->SetLink(wxHtmlLinkInfo(href, target));
 
diff --git a/src/html/winpars.cpp b/src/html/winpars.cpp
index 96650b2b37..c1b577f2e8 100644
--- a/src/html/winpars.cpp
+++ b/src/html/winpars.cpp
@@ -55,6 +55,7 @@ wxHtmlWinParser::wxHtmlWinParser(wxHtmlWindowInterface *wndIface)
     m_whitespaceMode = Whitespace_Normal;
     m_lastWordCell = NULL;
     m_posColumn = 0;
+    m_LinkColor.Set(0, 0, 0xFF);
 
     {
         int i, j, k, l, m;
@@ -211,7 +212,6 @@ void wxHtmlWinParser::InitParser(const wxString& source)
 
     m_UseLink = false;
     m_Link = wxHtmlLinkInfo( wxEmptyString );
-    m_LinkColor.Set(0, 0, 0xFF);
     m_ActualColor.Set(0, 0, 0);
     const wxColour windowColour = wxSystemSettings::GetColour(wxSYS_COLOUR_WINDOW) ;
     m_ActualBackgroundColor = m_windowInterface
@@ -289,36 +289,6 @@ wxFSFile *wxHtmlWinParser::OpenURL(wxHtmlURLType type,
     for (;;)
     {
         wxString myfullurl(myurl);
-
-        // consider url as absolute path first
-        wxURI current(myurl);
-        myfullurl = current.BuildUnescapedURI();
-
-        // if not absolute then ...
-        if( current.IsRelative() )
-        {
-            wxString basepath = GetFS()->GetPath();
-            wxURI base(basepath);
-
-            // ... try to apply base path if valid ...
-            if( !base.IsReference() )
-            {
-                wxURI path(myfullurl);
-                path.Resolve( base );
-                myfullurl = path.BuildUnescapedURI();
-            }
-            else
-            {
-                // ... or force such addition if not included already
-                if( !current.GetPath().Contains(base.GetPath()) )
-                {
-                    basepath += myurl;
-                    wxURI connected( basepath );
-                    myfullurl = connected.BuildUnescapedURI();
-                }
-            }
-        }
-
         wxString redirect;
         status = m_windowInterface->OnHTMLOpeningURL(type, myfullurl, &redirect);
         if ( status != wxHTML_REDIRECT )
diff --git a/src/stc/scintilla/include/SciLexer.h b/src/stc/scintilla/include/SciLexer.h
index 44c02a84ae..4c4eb40619 100644
--- a/src/stc/scintilla/include/SciLexer.h
+++ b/src/stc/scintilla/include/SciLexer.h
@@ -134,6 +134,7 @@
 #define SCLEX_TEHEX 119
 #define SCLEX_JSON 120
 #define SCLEX_EDIFACT 121
+#define SCLEX_QSP 200
 #define SCLEX_AUTOMATIC 1000
 #define SCE_P_DEFAULT 0
 #define SCE_P_COMMENTLINE 1
diff --git a/src/stc/scintilla/include/Scintilla.iface b/src/stc/scintilla/include/Scintilla.iface
index 035d80235f..2499ab0d37 100644
--- a/src/stc/scintilla/include/Scintilla.iface
+++ b/src/stc/scintilla/include/Scintilla.iface
@@ -2891,6 +2891,7 @@ val SCLEX_IHEX=118
 val SCLEX_TEHEX=119
 val SCLEX_JSON=120
 val SCLEX_EDIFACT=121
+val SCLEX_QSP=200
 
 # When a lexer specifies its language as SCLEX_AUTOMATIC it receives a
 # value assigned in sequence from SCLEX_AUTOMATIC+1.
diff --git a/src/stc/scintilla/lexers/LexQSP.cxx b/src/stc/scintilla/lexers/LexQSP.cxx
new file mode 100644
index 0000000000..22f635b086
--- /dev/null
+++ b/src/stc/scintilla/lexers/LexQSP.cxx
@@ -0,0 +1,281 @@
+// Scintilla source code edit control
+/** @file LexQSP.cxx
+ ** Lexer for QSP.
+ **/
+// Copyright 2008 by Valeriy Argunov <byte AT qsp DOT org>
+// The License.txt file describes the conditions under which this software may be distributed.
+
+#include <stdlib.h>
+#include <string.h>
+#include <stdio.h>
+#include <stdarg.h>
+#include <assert.h>
+#include <ctype.h>
+
+#include "ILexer.h"
+#include "Scintilla.h"
+#include "SciLexer.h"
+
+#include "WordList.h"
+#include "LexAccessor.h"
+#include "Accessor.h"
+#include "StyleContext.h"
+#include "CharacterSet.h"
+#include "LexerModule.h"
+
+#ifdef SCI_NAMESPACE
+using namespace Scintilla;
+#endif
+
+static bool IsComment(Accessor &styler, int pos, int len) {
+    char style = styler.StyleAt(pos);
+    return len > 0 && (style == SCE_B_PREPROCESSOR || style == SCE_B_DATE || style == SCE_B_COMMENT);
+}
+
+static inline bool IsAWordChar(int ch) {
+    return (ch >= 0x80 || isalnum(ch) || ch == '_' || ch == '$');
+}
+
+static inline bool IsAWordStart(int ch) {
+    return (ch >= 0x80 || isalpha(ch) || ch == '_' || ch == '$');
+}
+
+static inline bool IsANumberChar(int ch) {
+    return (ch < 0x80 && isdigit(ch));
+}
+
+static void ColouriseQSPDoc(Sci_PositionU startPos, Sci_Position length, int initStyle,
+                            WordList *keywordlists[], Accessor &styler) {
+    if (styler.GetPropertyInt("fold.all", 0))
+    {
+        startPos = 0;
+        length = styler.Length();
+        initStyle = 0;
+    }
+    char s[100];
+
+    WordList &keywords = *keywordlists[0];
+    WordList &keywords2 = *keywordlists[1];
+    WordList &keywords3 = *keywordlists[2];
+    WordList &keywords4 = *keywordlists[3];
+
+    int curLine = styler.GetLine(startPos);
+    int lineState = 0;
+    if (curLine > 0) lineState = styler.GetLineState(curLine - 1) & 0xFF;
+    int commentState = 0;
+    if (curLine > 0) commentState = (styler.GetLineState(curLine - 1) >> 8) & 0xFF;
+
+    styler.StartAt(startPos);
+
+    StyleContext sc(startPos, length, initStyle, styler);
+
+    if (sc.state != SCE_B_STRING && sc.state != SCE_B_STRINGEOL &&
+        sc.state != SCE_B_PREPROCESSOR && sc.state != SCE_B_DATE &&
+        sc.state != SCE_B_ASM && sc.state != SCE_B_ERROR &&
+        !commentState) {
+        sc.SetState(SCE_B_CONSTANT); // Begin of line
+    }
+
+    while (sc.More()) {
+        if (sc.state == SCE_B_OPERATOR) {
+            sc.SetState(SCE_B_DEFAULT);
+        } else if (sc.state == SCE_B_LABEL) {
+            if (sc.ch == '&') {
+                sc.SetState(SCE_B_DEFAULT);
+            }
+        } else if (sc.state == SCE_B_IDENTIFIER) {
+            sc.GetCurrentLowered(s, sizeof(s));
+            if (!IsAWordChar(sc.ch)) {
+                if (keywords.InList(s)) {
+                    sc.ChangeState(SCE_B_KEYWORD);
+                } else if (keywords2.InList(s)) {
+                    sc.ChangeState(SCE_B_KEYWORD2);
+                } else if (keywords3.InList(s)) {
+                    sc.ChangeState(SCE_B_KEYWORD3);
+                } else if (keywords4.InList(s)) {
+                    sc.ChangeState(SCE_B_KEYWORD4);
+                }
+                sc.SetState(SCE_B_DEFAULT);
+            }
+        } else if (sc.state == SCE_B_NUMBER) {
+            if (!IsANumberChar(sc.ch)) {
+                sc.SetState(SCE_B_DEFAULT);
+            }
+        } else if (sc.state == SCE_B_STRING) { // String 1
+            if (sc.ch == '\'') {
+                if (sc.chNext == '\'') {
+                    sc.Forward();
+                } else {
+                    sc.ForwardSetState(SCE_B_DEFAULT);
+                }
+            }
+        } else if (sc.state == SCE_B_STRINGEOL) { // String 2
+            if (sc.ch == '\"') {
+                if (sc.chNext == '\"') {
+                    sc.Forward();
+                } else {
+                    sc.ForwardSetState(SCE_B_DEFAULT);
+                }
+            }
+        } else if (sc.state == SCE_B_PREPROCESSOR) { // String 1 in the comment
+            if (sc.ch == '\'') {
+                if (sc.chNext == '\'') {
+                        sc.Forward();
+                } else {
+                    sc.ForwardSetState(SCE_B_COMMENT);
+                }
+            }
+        } else if (sc.state == SCE_B_DATE) { // String 2 in the comment
+            if (sc.ch == '\"') {
+                if (sc.chNext == '\"') {
+                    sc.Forward();
+                } else {
+                    sc.ForwardSetState(SCE_B_COMMENT);
+                }
+            }
+        } else if (sc.state == SCE_B_ASM) { // Continue line
+            if (sc.atLineStart || (sc.ch != ' ' && sc.ch != '\t' && !sc.atLineEnd)) {
+                sc.SetState(SCE_B_DEFAULT);
+            }
+        } else if (sc.state == SCE_B_ERROR) { // Continue line in the comment
+            if (sc.atLineStart || (sc.ch != ' ' && sc.ch != '\t' && !sc.atLineEnd)) {
+                sc.SetState(SCE_B_COMMENT);
+            }
+        }
+        if (sc.state == SCE_B_DEFAULT || sc.state == SCE_B_CONSTANT) {
+            if (sc.ch == ' ' && sc.chNext == '_') {
+                sc.SetState(SCE_B_ASM); // Continue line
+                sc.Forward();
+            } else if (sc.ch == '\'') {
+                sc.SetState(SCE_B_STRING); // String 1
+            } else if (sc.ch == '\"') {
+                sc.SetState(SCE_B_STRINGEOL); // String 2
+            } else if (sc.state == SCE_B_CONSTANT && sc.ch == '!') {
+                sc.SetState(SCE_B_COMMENT);
+            } else if (sc.state == SCE_B_CONSTANT && sc.ch == ':') {
+                sc.SetState(SCE_B_LABEL);
+            } else if (IsADigit(sc.ch)) {
+                sc.SetState(SCE_B_NUMBER);
+            } else if (IsAWordStart(sc.ch)) {
+                sc.SetState(SCE_B_IDENTIFIER);
+            } else if (isoperator(static_cast<char>(sc.ch)) && (sc.state != SCE_B_CONSTANT || (sc.ch != ' ' && sc.ch != '\t'))) {
+                sc.SetState(SCE_B_OPERATOR);
+                if (sc.ch == '&') {
+                    sc.ForwardSetState(SCE_B_CONSTANT); // Begin of line
+                    continue;
+                }
+            }
+        } else if (sc.state == SCE_B_COMMENT) {
+            if (sc.ch == ' ' && sc.chNext == '_') {
+                sc.SetState(SCE_B_ERROR); // Continue line in the comment
+                sc.Forward();
+            } else if (sc.ch == '\'') {
+                sc.SetState(SCE_B_PREPROCESSOR); // String 1 in the comment
+            } else if (sc.ch == '\"') {
+                sc.SetState(SCE_B_DATE); // String 2 in the comment
+            }
+        }
+        if (sc.state != SCE_B_STRING && sc.state != SCE_B_STRINGEOL &&
+            sc.state != SCE_B_PREPROCESSOR && sc.state != SCE_B_DATE) {
+            if (sc.ch == '{') {
+                ++lineState;
+                if (sc.state == SCE_B_COMMENT)
+                    ++commentState;
+                else {
+                    sc.ForwardSetState(SCE_B_CONSTANT); // Begin of line
+                    continue;
+                }
+            } else if (sc.ch == '}' && lineState) {
+                --lineState;
+                if (commentState) --commentState;
+            }
+        }
+        if (sc.atLineEnd) {
+            styler.SetLineState(curLine++, ((commentState & 0xFF) << 8) | (lineState & 0xFF));
+            if (sc.state != SCE_B_STRING && sc.state != SCE_B_STRINGEOL &&
+                sc.state != SCE_B_PREPROCESSOR && sc.state != SCE_B_DATE &&
+                sc.state != SCE_B_ASM && sc.state != SCE_B_ERROR &&
+                !commentState) {
+                sc.SetState(SCE_B_CONSTANT); // Begin of line
+            }
+        }
+        sc.Forward();
+    }
+    if (sc.state == SCE_B_IDENTIFIER) {
+        sc.GetCurrentLowered(s, sizeof(s));
+        if (keywords.InList(s)) {
+            sc.ChangeState(SCE_B_KEYWORD);
+        } else if (keywords2.InList(s)) {
+            sc.ChangeState(SCE_B_KEYWORD2);
+        } else if (keywords3.InList(s)) {
+            sc.ChangeState(SCE_B_KEYWORD3);
+        } else if (keywords4.InList(s)) {
+            sc.ChangeState(SCE_B_KEYWORD4);
+        }
+    }
+
+    sc.Complete();
+}
+
+static void FoldQSPDoc(Sci_PositionU startPos, Sci_Position length, int, WordList *[], Accessor &styler) {
+    if (styler.GetPropertyInt("fold.all", 0))
+    {
+        startPos = 0;
+        length = styler.Length();
+    }
+    Sci_Position endPos = startPos + length;
+    int spaceFlags = 0;
+    int indentCurrent;
+    Sci_Position lineCurrent = styler.GetLine(startPos);
+    if (startPos > 0) {
+        if (lineCurrent > 0) {
+            lineCurrent--;
+            startPos = styler.LineStart(lineCurrent);
+        }
+        indentCurrent = styler.LevelAt(lineCurrent);
+    }
+    else
+        indentCurrent = styler.IndentAmount(lineCurrent, &spaceFlags, IsComment);
+    char chNext = styler[startPos];
+    for (Sci_Position i = startPos; i < endPos; ++i) {
+        char ch = chNext;
+        chNext = styler.SafeGetCharAt(i + 1);
+
+        if ((ch == '\r' && chNext != '\n') || (ch == '\n') || (i == endPos - 1)) {
+            int lev = indentCurrent;
+            int indentNext = styler.IndentAmount(lineCurrent + 1, &spaceFlags, IsComment);
+            char lastStyle = styler.StyleAt(i);
+            if (!(indentCurrent & SC_FOLDLEVELWHITEFLAG) &&
+                (lastStyle != SCE_B_STRING && lastStyle != SCE_B_STRINGEOL &&
+                lastStyle != SCE_B_ASM && lastStyle != SCE_B_ERROR)) {
+                // Only non whitespace lines can be headers
+                if ((indentCurrent & SC_FOLDLEVELNUMBERMASK) < (indentNext & SC_FOLDLEVELNUMBERMASK)) {
+                    lev |= SC_FOLDLEVELHEADERFLAG;
+                } else if (indentNext & SC_FOLDLEVELWHITEFLAG) {
+                    // Line after is blank so check the next - maybe should continue further?
+                    int spaceFlags2 = 0;
+                    int indentNext2 = styler.IndentAmount(lineCurrent + 2, &spaceFlags2, IsComment);
+                    if (!(indentNext2 & SC_FOLDLEVELWHITEFLAG) &&
+                        (indentCurrent & SC_FOLDLEVELNUMBERMASK) < (indentNext2 & SC_FOLDLEVELNUMBERMASK)) {
+                        lev |= SC_FOLDLEVELHEADERFLAG;
+                    }
+                }
+            }
+            if (lastStyle != SCE_B_STRING && lastStyle != SCE_B_STRINGEOL &&
+                lastStyle != SCE_B_ASM && lastStyle != SCE_B_ERROR)
+                indentCurrent = indentNext;
+            styler.SetLevel(lineCurrent, lev);
+            lineCurrent++;
+        }
+    }
+}
+
+static const char * const qspWordListDesc[] = {
+    "Keywords",
+    "user1",
+    "user2",
+    "user3",
+    0
+};
+
+LexerModule lmQSP(SCLEX_QSP, ColouriseQSPDoc, "qsp", FoldQSPDoc, qspWordListDesc);
diff --git a/src/stc/scintilla/src/Catalogue.cxx b/src/stc/scintilla/src/Catalogue.cxx
index 2eadd95096..1b1ea99112 100644
--- a/src/stc/scintilla/src/Catalogue.cxx
+++ b/src/stc/scintilla/src/Catalogue.cxx
@@ -166,6 +166,7 @@ int Scintilla_LinkLexers() {
 	LINK_LEXER(lmPS);
 	LINK_LEXER(lmPureBasic);
 	LINK_LEXER(lmPython);
+	LINK_LEXER(lmQSP);
 	LINK_LEXER(lmR);
 	LINK_LEXER(lmREBOL);
 	LINK_LEXER(lmRegistry);
